/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CryptDlg.java
 *
 * Created on 22-Sep-2012, 17:57:43
 */

package com.nvl.nvlutils.gui;

import com.nvl.utils.*;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import org.apache.commons.codec.binary.Base64;


/**
 *
 * @author JohnOI
 */
public class CryptDlg extends javax.swing.JDialog {
    
    // Symbolic constants definitions
    
    // Algorithm type constants
    private static final Integer NOALGORITHM = 0;
    private static final Integer DES = 1;    
    private static final Integer DES3 = 2;    
    private static final Integer AES = 3;    
    private static final Integer CEASERSHIFT = 4;    
    private static final Integer CUSTOMALGORITHM = 5;   
    
    // Cipher mode constants
    private static final Integer NONE   = 0;
    private static final Integer CBC    = 1;       // Cipher Block Chaining
    private static final Integer CFB    = 2;       // Cipher Feedback Mode
    private static final Integer ECB    = 3;       // Electroninc Codebook Mode
    private static final Integer OFB    = 4;       // Output Feedback Mode   
    private static final Integer PCBC   = 5;      // Propagating Cipher Block Chaining
    
    // Padding scheme constants
    private static final Integer NOPADDING      = 0;    
    private static final Integer OAEP           = 1;
    private static final Integer PKCS5PADDING   = 2;
    private static final Integer SSL3PADDING    = 3;  

    // Key size constants
    private static final Integer NOKEYBITS  = 0;    
    private static final Integer KEY56BITS  = 56;
    private static final Integer KEY112BITS = 112;
    private static final Integer KEY128BITS = 128;     

    // other constants
    private static final int ENCRYPT = 0;
    private static final int DECRYPT = 1;        
    
    // variables
    private int algorithmSelected   = NOALGORITHM;
    private int keyLengthSelected   = NOKEYBITS;  
    private int modeSelected        = NONE;
    private int paddingScheme       = NOPADDING;
    

    Crypt crypt = null; 

    public Crypt getCrypt() {
        return crypt;
    }

    public void setCrypt(Crypt crypt) {
        this.crypt = crypt;
    }
    
    /** Creates new form CryptDlg */
    public CryptDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null); 
        
        // additional initialization, CryptDlg Specific
        setupCryptDlgComponents();
        
        // set the default options,  algorithm to 1 - DES, 56 bits, mode: ECB, padding: PKCS5PADDING
        DESRadBtn.doClick();
        key56bitsRadBtn.doClick();
        ECBRadBtn.doClick();
        PKCS5PaddingRadBtn.doClick();
        
    }
    
    
    private void setupCryptDlgComponents(){
        
        // temp, remove/delete later
        keyTxt.setText(null);

        // set up action commands for algorithm option panel
        DESRadBtn.setActionCommand(DES.toString());
        DES3RadBtn.setActionCommand(DES3.toString());
        AESRadBtn.setActionCommand(AES.toString());
        CeaserShiftRadBtn.setActionCommand(CEASERSHIFT.toString());
        CustomRadBtn.setActionCommand(CUSTOMALGORITHM.toString());
        
        // set up action commands for the mode
        NoneRadBtn.setActionCommand(NONE.toString());
        CBCRadBtn.setActionCommand(CBC.toString());
        CFBRadBtn.setActionCommand(CFB.toString());
        ECBRadBtn.setActionCommand(ECB.toString());
        OFBRadBtn.setActionCommand(OFB.toString());    
        PCBCRadBtn.setActionCommand(PCBC.toString());        

        // set up action commands for the Padding Scheme
        NoPaddingRadBtn.setActionCommand(NOPADDING.toString());
        OAEPRadBtn.setActionCommand(OAEP.toString());
        PKCS5PaddingRadBtn.setActionCommand(PKCS5PADDING.toString());
        SSL3PaddingRadBtn.setActionCommand(SSL3PADDING.toString());        
        
        // set up the action commands for the key length option panel
        key56bitsRadBtn.setActionCommand(KEY56BITS.toString());
        key112bitsRadBtn.setActionCommand(KEY112BITS.toString());
        key128bitsRadBtn.setActionCommand(KEY128BITS.toString());
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AlgorithmGroup = new javax.swing.ButtonGroup();
        keySizeGroup = new javax.swing.ButtonGroup();
        modeGroup = new javax.swing.ButtonGroup();
        paddingSchemeGroup = new javax.swing.ButtonGroup();
        actionsPanel = new javax.swing.JPanel();
        encryptBtn = new javax.swing.JButton();
        decryptBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        readKeyBtn = new javax.swing.JButton();
        generateKeyBtn = new javax.swing.JButton();
        saveKeyBtn = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inTextTxt = new javax.swing.JTextField();
        outTextTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        keyTxt = new javax.swing.JTextField();
        keySizePanel = new javax.swing.JPanel();
        key56bitsRadBtn = new javax.swing.JRadioButton();
        key112bitsRadBtn = new javax.swing.JRadioButton();
        key128bitsRadBtn = new javax.swing.JRadioButton();
        algorithmOptionsPanel = new javax.swing.JPanel();
        algorithmsPanel = new javax.swing.JPanel();
        DESRadBtn = new javax.swing.JRadioButton();
        DES3RadBtn = new javax.swing.JRadioButton();
        AESRadBtn = new javax.swing.JRadioButton();
        CeaserShiftRadBtn = new javax.swing.JRadioButton();
        CustomRadBtn = new javax.swing.JRadioButton();
        modePanel = new javax.swing.JPanel();
        NoneRadBtn = new javax.swing.JRadioButton();
        CBCRadBtn = new javax.swing.JRadioButton();
        PCBCRadBtn = new javax.swing.JRadioButton();
        CFBRadBtn = new javax.swing.JRadioButton();
        ECBRadBtn = new javax.swing.JRadioButton();
        OFBRadBtn = new javax.swing.JRadioButton();
        paddingSchemePanel = new javax.swing.JPanel();
        NoPaddingRadBtn = new javax.swing.JRadioButton();
        OAEPRadBtn = new javax.swing.JRadioButton();
        PKCS5PaddingRadBtn = new javax.swing.JRadioButton();
        SSL3PaddingRadBtn = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("NVL Crypt Utility");

        actionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Actions"));

        encryptBtn.setText("Encrypt");
        encryptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptBtnActionPerformed(evt);
            }
        });

        decryptBtn.setText("Decrypt");
        decryptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptBtnActionPerformed(evt);
            }
        });

        closeBtn.setText("Close");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        readKeyBtn.setText("Read Key");
        readKeyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readKeyBtnActionPerformed(evt);
            }
        });

        generateKeyBtn.setText("Generate Key");
        generateKeyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateKeyBtnActionPerformed(evt);
            }
        });

        saveKeyBtn.setText("Save Key");
        saveKeyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveKeyBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout actionsPanelLayout = new javax.swing.GroupLayout(actionsPanel);
        actionsPanel.setLayout(actionsPanelLayout);
        actionsPanelLayout.setHorizontalGroup(
            actionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(actionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(encryptBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addComponent(decryptBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(readKeyBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(generateKeyBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveKeyBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(closeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        actionsPanelLayout.setVerticalGroup(
            actionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(encryptBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(decryptBtn)
                .addGap(36, 36, 36)
                .addComponent(generateKeyBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(readKeyBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveKeyBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeBtn)
                .addContainerGap())
        );

        mainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("In text:");

        jLabel2.setText("Out text:");

        inTextTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inTextTxtActionPerformed(evt);
            }
        });

        outTextTxt.setEditable(false);

        jLabel3.setText("Key:");

        keyTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyTxtActionPerformed(evt);
            }
        });

        keySizePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Key Size (Bits)"));

        keySizeGroup.add(key56bitsRadBtn);
        key56bitsRadBtn.setText("56");
        key56bitsRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                key56bitsRadBtnActionPerformed(evt);
            }
        });

        keySizeGroup.add(key112bitsRadBtn);
        key112bitsRadBtn.setText("112");

        keySizeGroup.add(key128bitsRadBtn);
        key128bitsRadBtn.setText("128");
        key128bitsRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                key128bitsRadBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout keySizePanelLayout = new javax.swing.GroupLayout(keySizePanel);
        keySizePanel.setLayout(keySizePanelLayout);
        keySizePanelLayout.setHorizontalGroup(
            keySizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keySizePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(key56bitsRadBtn)
                .addGap(18, 18, 18)
                .addComponent(key112bitsRadBtn)
                .addGap(18, 18, 18)
                .addComponent(key128bitsRadBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        keySizePanelLayout.setVerticalGroup(
            keySizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keySizePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(keySizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(key56bitsRadBtn)
                    .addComponent(key112bitsRadBtn)
                    .addComponent(key128bitsRadBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        algorithmOptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Algorithm Options"));

        algorithmsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Algorithm"));

        AlgorithmGroup.add(DESRadBtn);
        DESRadBtn.setText("DES");
        DESRadBtn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                DESRadBtnStateChanged(evt);
            }
        });
        DESRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DESRadBtnActionPerformed(evt);
            }
        });

        AlgorithmGroup.add(DES3RadBtn);
        DES3RadBtn.setText("3DES");
        DES3RadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DES3RadBtnActionPerformed(evt);
            }
        });

        AlgorithmGroup.add(AESRadBtn);
        AESRadBtn.setText("AES");
        AESRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AESRadBtnActionPerformed(evt);
            }
        });

        AlgorithmGroup.add(CeaserShiftRadBtn);
        CeaserShiftRadBtn.setText("Ceaser Shift");
        CeaserShiftRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CeaserShiftRadBtnActionPerformed(evt);
            }
        });

        AlgorithmGroup.add(CustomRadBtn);
        CustomRadBtn.setText("Custom");
        CustomRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomRadBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout algorithmsPanelLayout = new javax.swing.GroupLayout(algorithmsPanel);
        algorithmsPanel.setLayout(algorithmsPanelLayout);
        algorithmsPanelLayout.setHorizontalGroup(
            algorithmsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(algorithmsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(algorithmsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CustomRadBtn)
                    .addComponent(CeaserShiftRadBtn)
                    .addComponent(AESRadBtn)
                    .addComponent(DES3RadBtn)
                    .addComponent(DESRadBtn))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        algorithmsPanelLayout.setVerticalGroup(
            algorithmsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(algorithmsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DESRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DES3RadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AESRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CeaserShiftRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CustomRadBtn)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        modePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Mode"));

        modeGroup.add(NoneRadBtn);
        NoneRadBtn.setText("NONE");
        NoneRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoneRadBtnActionPerformed(evt);
            }
        });

        modeGroup.add(CBCRadBtn);
        CBCRadBtn.setText("CBC (Cipher Block Chaining)");
        CBCRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBCRadBtnActionPerformed(evt);
            }
        });

        modeGroup.add(PCBCRadBtn);
        PCBCRadBtn.setText("PCBC (Propagating CBC)");

        modeGroup.add(CFBRadBtn);
        CFBRadBtn.setText("CFB (Cipher Feedback Mode)");
        CFBRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CFBRadBtnActionPerformed(evt);
            }
        });

        modeGroup.add(ECBRadBtn);
        ECBRadBtn.setText("ECB (Electronic Codebook Mode)");

        modeGroup.add(OFBRadBtn);
        OFBRadBtn.setText("OFB (Output Feedback Mode)");

        javax.swing.GroupLayout modePanelLayout = new javax.swing.GroupLayout(modePanel);
        modePanel.setLayout(modePanelLayout);
        modePanelLayout.setHorizontalGroup(
            modePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NoneRadBtn)
                    .addComponent(CBCRadBtn)
                    .addComponent(PCBCRadBtn)
                    .addComponent(CFBRadBtn)
                    .addComponent(ECBRadBtn)
                    .addComponent(OFBRadBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        modePanelLayout.setVerticalGroup(
            modePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modePanelLayout.createSequentialGroup()
                .addComponent(NoneRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CBCRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CFBRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ECBRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OFBRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PCBCRadBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        paddingSchemePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Padding Scheme"));

        paddingSchemeGroup.add(NoPaddingRadBtn);
        NoPaddingRadBtn.setText("NoPadding");
        NoPaddingRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoPaddingRadBtnActionPerformed(evt);
            }
        });

        paddingSchemeGroup.add(OAEPRadBtn);
        OAEPRadBtn.setText("OAEP");

        paddingSchemeGroup.add(PKCS5PaddingRadBtn);
        PKCS5PaddingRadBtn.setText("PKCS5Padding");

        paddingSchemeGroup.add(SSL3PaddingRadBtn);
        SSL3PaddingRadBtn.setText("SSL3Padding");

        javax.swing.GroupLayout paddingSchemePanelLayout = new javax.swing.GroupLayout(paddingSchemePanel);
        paddingSchemePanel.setLayout(paddingSchemePanelLayout);
        paddingSchemePanelLayout.setHorizontalGroup(
            paddingSchemePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paddingSchemePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paddingSchemePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NoPaddingRadBtn)
                    .addComponent(OAEPRadBtn)
                    .addComponent(PKCS5PaddingRadBtn)
                    .addComponent(SSL3PaddingRadBtn))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        paddingSchemePanelLayout.setVerticalGroup(
            paddingSchemePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paddingSchemePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NoPaddingRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OAEPRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PKCS5PaddingRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SSL3PaddingRadBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout algorithmOptionsPanelLayout = new javax.swing.GroupLayout(algorithmOptionsPanel);
        algorithmOptionsPanel.setLayout(algorithmOptionsPanelLayout);
        algorithmOptionsPanelLayout.setHorizontalGroup(
            algorithmOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(algorithmOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(algorithmsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paddingSchemePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        algorithmOptionsPanelLayout.setVerticalGroup(
            algorithmOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(algorithmOptionsPanelLayout.createSequentialGroup()
                .addGroup(algorithmOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(paddingSchemePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(algorithmsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(algorithmOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(keySizePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inTextTxt)
                            .addComponent(keyTxt)
                            .addComponent(outTextTxt))))
                .addContainerGap())
            .addComponent(jSeparator1)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(inTextTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(keyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(outTextTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(algorithmOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(keySizePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(actionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inTextTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inTextTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inTextTxtActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_closeBtnActionPerformed

    private void keyTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keyTxtActionPerformed

    private void encryptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptBtnActionPerformed
        
        encryptHandler();
    }//GEN-LAST:event_encryptBtnActionPerformed

    private void decryptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptBtnActionPerformed
        
        decryptHandler();
    }//GEN-LAST:event_decryptBtnActionPerformed

    private int encryptHandler() {
       
        String plainText = "";
        String cipherText = "";
        int caeserShiftKey = 0;
                
        // remember to validate the input data in the dialog
        
        // get the plain text
        plainText = inTextTxt.getText();
        
        // get the key from GUI field if it is NOT empty     
        if ( !(keyTxt.getText().isEmpty() ) ) {
            this.getCrypt().setKey(keyTxt.getText());
        }   
        else {
            // notify user that no algorithm has been selected
            JOptionPane.showMessageDialog(null,
                              "Please input or generate a key before proceeding to encrypt.",
                              "Crypt Utility Message",
                              JOptionPane.INFORMATION_MESSAGE);               
            return 1;
        }
        
        // call the template method
        cipherText = this.getCrypt().doCrypt(ENCRYPT, plainText); 
        // ---------- End of use Template Method here -----------      
        
//        byte[] outDataBytes = this.getCrypt().encrypt(plainText.getBytes());
//        String cipherTextBase64 = Base64.encodeBase64String(outDataBytes);
        
        // debug
        System.out.println("cipherText: " + cipherText );
//        System.out.println("cipherTextBase64: " + cipherTextBase64 );        
        
        // set the cipher text
        outTextTxt.setText(cipherText);
        
        return 0;
    }
    
    private int decryptHandler() {
        
        String cipherText = "";
        String plainText = "";
                
        // get the plain text
        cipherText = inTextTxt.getText();
        

        // get the key from GUI field if it is NOT empty     
        if ( !(keyTxt.getText().isEmpty() ) ) {
            this.getCrypt().setKey(keyTxt.getText());
        }   
        else {
            // notify user that no algorithm has been selected
            JOptionPane.showMessageDialog(null,
                              "Please input or generate a key before proceeding to decrypt.",
                              "Crypt Utility Message",
                              JOptionPane.INFORMATION_MESSAGE);     
            return 1;
        }
        
        // call the template method
        plainText = this.getCrypt().doCrypt(DECRYPT, cipherText); 
        // ---------- End of use Template Method here -----------        
        
//        byte[] outDataBytes = this.getCrypt().decrypt( Base64.decodeBase64(cipherText) );
//        String plainText2 = new String (outDataBytes);
        
        // debug
        System.out.println("cipherText: " + plainText );
//        System.out.println("cipherTextBase64: " + plainText2 );          
        
        // set the cipher text
        outTextTxt.setText(plainText);
       
        return 0;
    }
    
    private void  generateKeyHandler(){
        // validate key length
        if ( keyLengthSelected == NOKEYBITS ) {
            JOptionPane.showMessageDialog(this,"Please select a valid key length before proceeding.");
        }
        else {
            String keyString = this.getCrypt().generateKey(keyLengthSelected);
            keyTxt.setText(keyString);         
        }
        
    }
    
    private void DESRadBtnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_DESRadBtnStateChanged
        // TODO add your handling code here:
//        DESRadBtn.
    }//GEN-LAST:event_DESRadBtnStateChanged

    private void key56bitsRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_key56bitsRadBtnActionPerformed
        // Set choice of key length to that associated with this radio button through the
        // unique coded action command associated with each radio button
        keyLengthRadioGroupActionHandler( Integer.parseInt( evt.getActionCommand() ) );
    }//GEN-LAST:event_key56bitsRadBtnActionPerformed

    private void key128bitsRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_key128bitsRadBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_key128bitsRadBtnActionPerformed

    private void NoneRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoneRadBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NoneRadBtnActionPerformed

    private void CFBRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CFBRadBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CFBRadBtnActionPerformed

    private void NoPaddingRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoPaddingRadBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NoPaddingRadBtnActionPerformed

    private void DESRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DESRadBtnActionPerformed
        // Set choice of algorithm to that associated with this radio button through the
        // unique coded action command associated with each radio button
        algorithmsRadioGroupActionHandler( Integer.parseInt( evt.getActionCommand() ) );
    }//GEN-LAST:event_DESRadBtnActionPerformed

    private void DES3RadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DES3RadBtnActionPerformed
        // Set choice of algorithm to that associated with this radio button through the
        // unique coded action command associated with each radio button
        algorithmsRadioGroupActionHandler( Integer.parseInt( evt.getActionCommand() ) );
    }//GEN-LAST:event_DES3RadBtnActionPerformed

    private void AESRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AESRadBtnActionPerformed
        // Set choice of algorithm to that associated with this radio button through the
        // unique coded action command associated with each radio button
        algorithmsRadioGroupActionHandler( Integer.parseInt( evt.getActionCommand() ) );
    }//GEN-LAST:event_AESRadBtnActionPerformed

    private void CeaserShiftRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CeaserShiftRadBtnActionPerformed
        // Set choice of algorithm to that associated with this radio button through the
        // unique coded action command associated with each radio button
        algorithmsRadioGroupActionHandler( Integer.parseInt( evt.getActionCommand() ) );
    }//GEN-LAST:event_CeaserShiftRadBtnActionPerformed

    private void CustomRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomRadBtnActionPerformed
        // Set choice of algorithm to that associated with this radio button through the
        // unique coded action command associated with each radio button
        algorithmsRadioGroupActionHandler( Integer.parseInt( evt.getActionCommand() ) );
    }//GEN-LAST:event_CustomRadBtnActionPerformed

    private void generateKeyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateKeyBtnActionPerformed
        generateKeyHandler();
    }//GEN-LAST:event_generateKeyBtnActionPerformed

    private void saveKeyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveKeyBtnActionPerformed
        saveKeyHandler();
    }//GEN-LAST:event_saveKeyBtnActionPerformed

    private void readKeyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readKeyBtnActionPerformed
        readKeyHandler();
    }//GEN-LAST:event_readKeyBtnActionPerformed

    private void CBCRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBCRadBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBCRadBtnActionPerformed
   
    
   private void saveKeyHandler() {
       // save the key to an XML file here...
   
        String sTimeStamp = Utils.getDateTimeStamp("yyyyMMMddHHmmsss") ;      
                
        String keyFileName = "nvlkeyfile_" + sTimeStamp +".key";
        
        FileWriter fileWriter;
        try {
            // Check if file already exists, if it does, open file for append                
            if (Utils.fileExists( keyFileName) ){                
                fileWriter = new FileWriter(keyFileName, true);                                        
            }
            else {
                // create a new file
                fileWriter = new FileWriter(keyFileName);                    
            }
            
            // Date and time stamp in format 'yyyy-MMM-dd HH:mm:sss', 
            // e.g. 2009-Feb-16 16:00:047
            // sTimeStamp = Utils.getDateTimeStamp("yyyy-MMM-dd HH:mm:sss");  
            String XMLHeader = "<?xml version=\"1.0\" encoding=\"utf-8\"?>";
            String sTimeStampAsID = Utils.getDateTimeStamp("yyyyMMddHHmmsss") ;  
            
            XMLWriter xmlWriter = new XMLWriter();
            xmlWriter.addBeginTag("KeyRecord");
            // @todo: add key id, and key description
            xmlWriter.addTagsAndValue("keyID", "sTimeStampAsID"); 
            xmlWriter.addTagsAndValue("keyDescription", "NVL Crypt Key"); 
            xmlWriter.addTagsAndValue("keyAlgorithmType", int2Algorithm(algorithmSelected));        
            xmlWriter.addTagsAndValue("keyValue", keyTxt.getText());
            xmlWriter.addTagsAndValue("encoded", "Y"); 
            xmlWriter.addTagsAndValue("encoding", "Base64");        
            xmlWriter.addEndTag("KeyRecord");            
            
            String keyXML =  xmlWriter.getXML();  
            
            fileWriter.write(keyXML);
            fileWriter.write("\n");
            fileWriter.close();
            System.out.println("DEBUG: Key Record\n " + keyXML);
        }
        catch (IOException ex) {
            System.out.println("Error while key to XML file...");
        }           

   }
    
   private void readKeyHandler() {
       // read the key from an XML file here...
       
       // use a file dialog to select key file
     
       
   }   
    
    private void algorithmsRadioGroupActionHandler(int selectedAlgorithmCode){
        algorithmSelected  = selectedAlgorithmCode;
        
        if ( algorithmSelected == NOALGORITHM ) {
            // notify user that no algorithm has been selected
            JOptionPane.showMessageDialog(null,
                              "Please select an algorithm before proceeding to encrypt.",
                              "Crypt Utility Message",
                              JOptionPane.INFORMATION_MESSAGE);           

        }        
        if ( algorithmSelected == DES ) {
            this.setCrypt( new DESCrypt() ) ; 
            
            setBlockModeGroup(true);
            setPaddingGroup(true);             
            keySizePanel.setEnabled(true);
            
            key56bitsRadBtn.setEnabled(true);        
            key128bitsRadBtn.setEnabled(false);
            key112bitsRadBtn.setEnabled(false);           
        }
        else if ( algorithmSelected == DES3 )  {
            setBlockModeGroup(true);
            setPaddingGroup(true); 
            
            keySizePanel.setEnabled(true);            
            key56bitsRadBtn.setEnabled(false);
            key112bitsRadBtn.setEnabled(true);  
            key128bitsRadBtn.setEnabled(false);          
        }
        else if ( algorithmSelected == AES )  {
            setBlockModeGroup(true);
            setPaddingGroup(true); 
            
            keySizePanel.setEnabled(true);            
            key128bitsRadBtn.setEnabled(true);
            key56bitsRadBtn.setEnabled(false);
            key112bitsRadBtn.setEnabled(false);             
        }
        else if ( algorithmSelected == CEASERSHIFT )  {
            this.setCrypt( new CaeserShiftCrypt() ) ;  
            key128bitsRadBtn.setEnabled(false);
            key56bitsRadBtn.setEnabled(false);
            key112bitsRadBtn.setEnabled(false);             
            
            // disable 
            keySizePanel.setEnabled(false);
            setBlockModeGroup(false);
            setPaddingGroup(false);                
            

        }        
        else if ( algorithmSelected == CUSTOMALGORITHM )  {
            
            setBlockModeGroup(true);
            setPaddingGroup(true);             
            keySizePanel.setEnabled(true);            
            
            key56bitsRadBtn.setEnabled(true);
            key112bitsRadBtn.setEnabled(true);           
            key128bitsRadBtn.setEnabled(true);          
        }          

    }

    private void setPaddingGroup(boolean flag) {
        paddingSchemePanel.setEnabled(flag);    
        NoPaddingRadBtn.setEnabled(flag);
        OAEPRadBtn.setEnabled(flag);
        PKCS5PaddingRadBtn.setEnabled(flag);
        SSL3PaddingRadBtn.setEnabled(flag);
    }
    

    private void setBlockModeGroup(boolean flag) {
        modePanel.setEnabled(flag);        
        NoneRadBtn.setEnabled(flag);
        CBCRadBtn.setEnabled(flag);
        CFBRadBtn.setEnabled(flag);
        ECBRadBtn.setEnabled(flag);    
        OFBRadBtn.setEnabled(flag);
        PCBCRadBtn.setEnabled(flag);
    }    
    
    private void keyLengthRadioGroupActionHandler(int selectedKeyLength) {
        keyLengthSelected = selectedKeyLength;
        
        if ( keyLengthSelected  == KEY56BITS ) {
            
        }
        else if ( keyLengthSelected  == KEY112BITS ) {
            
        }
        else if ( keyLengthSelected  == KEY128BITS ) {
            
        }        
        
        
    }
    
    private String int2Algorithm(int algorithm ) {
        /*
        private static final Integer NOALGORITHM = 0;
        private static final Integer DES = 1;    
        private static final Integer DES3 = 2;    
        private static final Integer AES = 3;    
        private static final Integer CEASERSHIFT = 4;    
        private static final Integer CUSTOMALGORITHM = 5;   
         */
        String algorithmName = "";
        
        switch (algorithm) {
            case 0: algorithmName = "NOALGORITHM"; break;
            case 1: algorithmName = "DES"; break;                
            case 2: algorithmName = "DES3"; break;
            case 3: algorithmName = "AES"; break;                
            case 4: algorithmName = "CEASERSHIFT"; break;
            case 5: algorithmName = "CUSTOMALGORITHM"; break;                
         }
        return algorithmName;
    }
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CryptDlg dialog = new CryptDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton AESRadBtn;
    private javax.swing.ButtonGroup AlgorithmGroup;
    private javax.swing.JRadioButton CBCRadBtn;
    private javax.swing.JRadioButton CFBRadBtn;
    private javax.swing.JRadioButton CeaserShiftRadBtn;
    private javax.swing.JRadioButton CustomRadBtn;
    private javax.swing.JRadioButton DES3RadBtn;
    private javax.swing.JRadioButton DESRadBtn;
    private javax.swing.JRadioButton ECBRadBtn;
    private javax.swing.JRadioButton NoPaddingRadBtn;
    private javax.swing.JRadioButton NoneRadBtn;
    private javax.swing.JRadioButton OAEPRadBtn;
    private javax.swing.JRadioButton OFBRadBtn;
    private javax.swing.JRadioButton PCBCRadBtn;
    private javax.swing.JRadioButton PKCS5PaddingRadBtn;
    private javax.swing.JRadioButton SSL3PaddingRadBtn;
    private javax.swing.JPanel actionsPanel;
    private javax.swing.JPanel algorithmOptionsPanel;
    private javax.swing.JPanel algorithmsPanel;
    private javax.swing.JButton closeBtn;
    private javax.swing.JButton decryptBtn;
    private javax.swing.JButton encryptBtn;
    private javax.swing.JButton generateKeyBtn;
    private javax.swing.JTextField inTextTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton key112bitsRadBtn;
    private javax.swing.JRadioButton key128bitsRadBtn;
    private javax.swing.JRadioButton key56bitsRadBtn;
    private javax.swing.ButtonGroup keySizeGroup;
    private javax.swing.JPanel keySizePanel;
    private javax.swing.JTextField keyTxt;
    private javax.swing.JPanel mainPanel;
    private javax.swing.ButtonGroup modeGroup;
    private javax.swing.JPanel modePanel;
    private javax.swing.JTextField outTextTxt;
    private javax.swing.ButtonGroup paddingSchemeGroup;
    private javax.swing.JPanel paddingSchemePanel;
    private javax.swing.JButton readKeyBtn;
    private javax.swing.JButton saveKeyBtn;
    // End of variables declaration//GEN-END:variables

}
